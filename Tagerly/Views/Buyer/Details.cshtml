@model ProductViewModel
@{
    ViewData["Title"] = "Product Details";
}

<div class="container py-4" style="background-color: #F5F1EB;">
    <div class="row">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <img src="@Model.ImageUrl" class="card-img-top p-4" alt="@Model.Name"
                     style="max-height: 500px; object-fit: contain; background-color: white;">
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm h-100" style="border-color: #c4a484;">
                <div class="card-body">
                    <h2 class="card-title" style="color: #5c3d24;">@Model.Name</h2>
                    <p class="text-muted">Category: @Model.CategoryName</p>
                    <p class="text-muted">Sold by: @Model.SellerName</p>

                    <h4 style="color: #8b5e3c;">@Model.Price.ToString("C")</h4>

                    @if (Model.Quantity > 0)

                    {
                        <span class="badge" style="background-color: #c4a484; color: #5c3d24;">In Stock (@Model.Quantity available)</span>
                    }

                    else

                    {
                        <span class="badge bg-secondary">Out of Stock</span>
                    }

                    <hr />

                    <!-- Quantity Selector -->
                    <div class="mb-4">
                        <div class="d-flex align-items-center">
                            <label class="me-2 fw-bold">Quantity:</label>
                            <div class="position-relative" style="width: 80px;">
                                <select id="quantity-selector" class="form-select" @(Model.Quantity <= 0 ? "disabled" : "")>
                                    @{
                                        var maxQuantity = Math.Min(10, Model.Quantity);

                                        for (int i = 1; i <= maxQuantity; i++)

                                        {
                                            <option value="@i">@i</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <h5>Description</h5>
                    <p class="card-text">@Model.Description</p>
                </div>
                <div class="card-footer bg-transparent">
                    <div class="d-flex gap-2">
                        <button class="btn btn-favorite flex-grow-0" data-product-id="@Model.ProductId">
                            <i class="ri-heart-line"></i> Favorite
                        </button>
                        <button class="btn btn-add-to-cart flex-grow-1"
                                data-product-id="@Model.ProductId"
                        @(Model.Quantity <= 0 ? "disabled" : "")>
                            <i class="ri-shopping-cart-line"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="mt-4">
        <a asp-action="Index" class="btn" style="background-color: #8b5e3c; color: white;">
            <i class="ri-arrow-left-line"></i> Back to Products
        </a>
    </div>
</div>


<style>
    .btn-favorite {
        background-color: white;
        color: #5c3d24;
        border: 1px solid #5c3d24;
        transition: all 0.3s ease;
    }

        .btn-favorite:hover {
            background-color: #f5f1eb;
        }

        .btn-favorite.active {
            background-color: #ff6b6b;
            color: white;
            border-color: #ff6b6b;
        }

    .btn-add-to-cart {
        background-color: #5c3d24;
        color: white;
        transition: all 0.3s ease;
    }

        .btn-add-to-cart:hover {
            background-color: #8b5e3c;
        }

        .btn-add-to-cart:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
    /* Add this to your style section */
    #quantity-selector {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        padding-right: 1.5rem;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%235c3d24' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.5rem center;
        background-size: 16px 12px;
        z-index: 1;
    }

        /* Remove default arrow in IE */
        #quantity-selector::-ms-expand {
            display: none;
        }

    /* Ensure dropdown appears above other elements */
    .form-select {
        z-index: 2;
    }

    /* Fix for dropdown menu */
    .dropdown-menu {
        z-index: 1000;
    }
@section Scripts {
    <script>
        $(document).ready(function () {
            // Favorite button click handler
            $('.btn-favorite').click(function (e) {
                e.preventDefault();
                const productId = $(this).data('product-id');
                $(this).toggleClass('active');

                // Toggle heart icon
                const icon = $(this).find('i');
                if ($(this).hasClass('active')) {
                    icon.removeClass('ri-heart-line').addClass('ri-heart-fill');
                    // AJAX call to add favorite
                    $.post('/Favorites/Add', { productId: productId }, function (response) {
                        if (!response.success) {
                            $(this).toggleClass('active');
                            icon.removeClass('ri-heart-fill').addClass('ri-heart-line');
                        }
                    });
                } else {
                    icon.removeClass('ri-heart-fill').addClass('ri-heart-line');
                    // AJAX call to remove favorite
                    $.ajax({
                        url: '/Favorites/Remove',
                        type: 'DELETE',
                        data: { productId: productId },
                        success: function (response) {
                            if (!response.success) {
                                $(this).toggleClass('active');
                                icon.removeClass('ri-heart-line').addClass('ri-heart-fill');
                            }
                        }
                    });
                }
            });

            // Add to cart button click handler with quantity
            $('.btn-add-to-cart').click(function (e) {
                e.preventDefault();
                const productId = $(this).data('product-id');
                const quantity = parseInt($('#quantity-selector').val());
                const button = $(this);

                // Add loading state
                button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...');
                button.prop('disabled', true);

                // AJAX call to add to cart
                $.post('/Cart/AddItem', { productId: productId, quantity: quantity }, function (response) {
                    if (response.success) {
                        button.html('<i class="ri-check-line"></i> Added!');
                        // Update cart count in navbar
                        updateCartCount();
                        showToast('Product added to cart successfully!', 'success');
                    } else {
                        button.html('<i class="ri-error-warning-line"></i> Error');
                        
                        // Check if it's a stock availability error
                        if (response.availableStock !== undefined) {
                            // It's a stock availability issue
                            showStockWarning(response.availableStock, response.inCartQuantity, quantity);
                        } else {
                            // Other error
                            showToast(response.message || 'Failed to add item to cart', 'error');
                        }
                    }
                    
                    setTimeout(function () {
                        button.html('<i class="ri-shopping-cart-line"></i> Add to Cart');
                        button.prop('disabled', false);
                    }, 1500);
                }).fail(function (xhr) {
                    if (xhr.status === 401) {
                        // User is not authenticated
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                    } else {
                        button.html('<i class="ri-error-warning-line"></i> Error');
                        showToast('Failed to add item to cart', 'error');
                        setTimeout(function () {
                            button.html('<i class="ri-shopping-cart-line"></i> Add to Cart');
                            button.prop('disabled', false);
                        }, 1500);
                    }
                });
            });

            // Function to show stock warning modal
            function showStockWarning(availableStock, inCartQuantity, requestedQuantity) {
                // Check if modal container exists, if not create it
                if ($('#stock-warning-modal').length === 0) {
                    $('body').append(`
                        <div class="modal fade" id="stock-warning-modal" tabindex="-1" aria-labelledby="stockWarningModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header bg-warning">
                                        <h5 class="modal-title" id="stockWarningModalLabel">Stock Availability Warning</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body" id="stock-warning-body">
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <a href="/Cart" class="btn" style="background-color: #5c3d24; color: white;">View Cart</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `);
                }

                // Set the modal body content
                let message = `<div class="alert alert-warning">
                    <h5><i class="ri-error-warning-line"></i> Not Enough Stock</h5>
                    <p>Sorry, we don't have enough items in stock to fulfill your request.</p>
                    <hr>
                    <ul>
                        <li>Available in stock: <strong>${availableStock}</strong> items</li>
                        <li>Already in your cart: <strong>${inCartQuantity}</strong> items</li>
                        <li>You requested: <strong>${requestedQuantity}</strong> more items</li>
                    </ul>`;
                
                if (availableStock - inCartQuantity > 0) {
                    message += `<p>You can add up to <strong>${availableStock - inCartQuantity}</strong> more items to your cart.</p>`;
                } else if (inCartQuantity > 0) {
                    message += `<p>You already have the maximum available quantity in your cart.</p>`;
                }
                
                message += `</div>`;
                
                $('#stock-warning-body').html(message);

                // Show the modal
                var stockModal = new bootstrap.Modal(document.getElementById('stock-warning-modal'));
                stockModal.show();
            }

            // Update cart count in navbar
            function updateCartCount() {
                $.get('/Cart/GetItemCount', function (count) {
                    const cartCountElement = $('.cart-count');
                    if (cartCountElement.length) {
                        cartCountElement.text(count);

                        // Add animation effect
                        cartCountElement.addClass('animate_animated animate_heartBeat');
                        setTimeout(function () {
                            cartCountElement.removeClass('animate_animated animate_heartBeat');
                        }, 1000);
                    }
                });
            }

            // Display toast notifications
            function showToast(message, type = 'info') {
                // Check if toast container exists, if not create it
                if ($('#toast-container').length === 0) {
                    $('body').append('<div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 5"></div>');
                }

                // Create toast element
                const toastId = 'toast-' + Date.now();
                const bgClass = type === 'success' ? 'bg-success' :
                    type === 'error' ? 'bg-danger' :
                        type === 'warning' ? 'bg-warning' : 'bg-info';

                const toastHtml = `
                    <div id="${toastId}" class="toast align-items-center ${bgClass} text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;

                // Add toast to container
                $('#toast-container').append(toastHtml);

                // Initialize and show the toast
                const toastElement = new bootstrap.Toast(document.getElementById(toastId), {
                    delay: 3000
                });
                toastElement.show();
            }

            // Initialize any existing cart count
            updateCartCount();
        });
    </script>
}